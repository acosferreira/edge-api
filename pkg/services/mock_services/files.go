// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/files.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	files "github.com/redhatinsights/edge-api/pkg/services/files"
)

// MockFilesService is a mock of FilesService interface.
type MockFilesService struct {
	ctrl     *gomock.Controller
	recorder *MockFilesServiceMockRecorder
}

// MockFilesServiceMockRecorder is the mock recorder for MockFilesService.
type MockFilesServiceMockRecorder struct {
	mock *MockFilesService
}

// NewMockFilesService creates a new mock instance.
func NewMockFilesService(ctrl *gomock.Controller) *MockFilesService {
	mock := &MockFilesService{ctrl: ctrl}
	mock.recorder = &MockFilesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesService) EXPECT() *MockFilesServiceMockRecorder {
	return m.recorder
}

// GetDownloader mocks base method.
func (m *MockFilesService) GetDownloader() files.Downloader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloader")
	ret0, _ := ret[0].(files.Downloader)
	return ret0
}

// GetDownloader indicates an expected call of GetDownloader.
func (mr *MockFilesServiceMockRecorder) GetDownloader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloader", reflect.TypeOf((*MockFilesService)(nil).GetDownloader))
}

// GetExtractor mocks base method.
func (m *MockFilesService) GetExtractor() files.Extractor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtractor")
	ret0, _ := ret[0].(files.Extractor)
	return ret0
}

// GetExtractor indicates an expected call of GetExtractor.
func (mr *MockFilesServiceMockRecorder) GetExtractor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtractor", reflect.TypeOf((*MockFilesService)(nil).GetExtractor))
}

// GetFile mocks base method.
func (m *MockFilesService) GetFile(path string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", path)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockFilesServiceMockRecorder) GetFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockFilesService)(nil).GetFile), path)
}

// GetSignedURL mocks base method.
func (m *MockFilesService) GetSignedURL(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignedURL", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignedURL indicates an expected call of GetSignedURL.
func (mr *MockFilesServiceMockRecorder) GetSignedURL(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignedURL", reflect.TypeOf((*MockFilesService)(nil).GetSignedURL), path)
}

// GetUploader mocks base method.
func (m *MockFilesService) GetUploader() files.Uploader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploader")
	ret0, _ := ret[0].(files.Uploader)
	return ret0
}

// GetUploader indicates an expected call of GetUploader.
func (mr *MockFilesServiceMockRecorder) GetUploader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploader", reflect.TypeOf((*MockFilesService)(nil).GetUploader))
}
